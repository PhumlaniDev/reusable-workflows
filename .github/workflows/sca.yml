name: 20 SCA

on:
  workflow_dispatch:
  workflow_call:

permissions:
  actions: read
  contents: read
  security-events: write

jobs:
  sca:
    strategy:
      fail-fast: false
      matrix:
        os: [ "ubuntu-20.04" ] # [ "macos-latest", "windows-latest", "ubuntu-20.04" ]
        # Test once with explicit manifest_file, and once without
        manifest_file: [ "pom.xml" ]
    runs-on: ${{ matrix.os }}
    defaults:
      run:
        shell: bash
    name: SCA Java project
    steps:
      - name: Checkout action
        uses: actions/checkout@v4

      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          distribution: 'temurin'
          java-version: '17'
          cache: 'maven'

      - name: Install SCA tool (CRDA)
        uses: redhat-actions/openshift-tools-installer@v1
        with:
          source: github
          github_pat: ${{ github.token }}
          crda: "latest"

      #- name: SCA (CRDA) Scan
      #  id: crda_scan
      #  uses: redhat-actions/crda@v1.2
      #  with:
      #    manifest_file: ${{ matrix.manifest_file }}
      #    snyk_token: ${{ secrets.OUR_SNYK_KEY }}
      #    fail_on: never

      - name: Print JSON analysis report
        if: ${{ always() && steps.scan.outputs.crda_report_json }}
        run: cat ${{ steps.scan.outputs.crda_report_json }}

      - name: Print SARIF analysis report
        if: ${{ always() && steps.scan.outputs.crda_report_sarif }}
        run: cat ${{ steps.scan.outputs.crda_report_sarif }}

      - name: Print Report Link
        run: echo ${{ steps.scan.outputs.report_link }}

      - name: Print Artifact Name
        run: echo ${{ steps.scan.outputs.artifact_name }}

  vulnerability-scan:
    name: Security Scans
    runs-on: ubuntu-latest
    needs: code-analysis
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Log in to Docker Hub
        run: echo "${{ secrets.DOCKERHUB_PASSWORD }}" | docker login -u "${{ secrets.DOCKERHUB_USERNAME }}" --password-stdin

      - name: Pull Docker Image
        run: docker pull ${{ secrets.DOCKERHUB_USERNAME }}/tech-hive-store:${{ github.run_number }}

      - name: Run Trivy vulnerability scanner (Generate SARIF)
        uses: aquasecurity/trivy-action@0.28.0
        with:
          image-ref: 'docker.io/${{ secrets.DOCKERHUB_USERNAME }}/tech-hive-store:${{ github.run_number }}'
          format: 'sarif'
          output: 'trivy-results.sarif'
          ignore-unfixed: true
          vuln-type: 'os,library'
          severity: 'CRITICAL,HIGH'
        continue-on-error: true

      - name: Upload Trivy SARIF report to GitHub Security tab
        uses: github/codeql-action/upload-sarif@v2.1.28
        with:
          sarif_file: trivy-results.sarif
