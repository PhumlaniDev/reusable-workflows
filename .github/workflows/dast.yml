---
name: Dynamic Application Security Testing (DAST)
on:
  workflow_dispatch:
  workflow_call:
    secrets:
      DOCKERHUB_USERNAME:
        required: true
      DOCKERHUB_PASSWORD:
        required: true

permissions:
  actions: read
  contents: read
  security-events: write

env:
  IMAGE_TAG: ${{ secrets.DOCKERHUB_USERNAME }}/tech-hive-store:latest
  APP_PORT: 8080
  HEALTH_ENDPOINT: http://localhost:$APP_PORT/actuator/health

jobs:
  dast-scan:
    name: DAST Scan
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          ref: develop

      - name: Run Application Container
        run: |
          docker pull "${{ env.IMAGE_TAG }}"
          docker run -d --name tech-hive-store -p 8080:8080 \
            -e SPRING_PROFILES_ACTIVE=develop \
            "${{ env.IMAGE_TAG }}"

          # Wait until health check passes
          echo "Waiting for app to be healthy..."
          for i in {1..30}; do
            if curl -s "${HEALTH_ENDPOINT}" | grep -q 'UP'; then
              echo "App is healthy!"
              break
            fi
            echo "Retrying... Attempt $i"
            sleep 5
          done

      - name: ZAP Scan
        uses: zaproxy/action-full-scan@v0.12.0
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          docker_name: "ghcr.io/zaproxy/zaproxy:stable"
          target: "http://localhost:8080"
          cmd_options: '-a -j -l WARN -z "-addoninstallall" '
          allow_issue_writing: true

      - name: Upload HTML report
        uses: actions/upload-artifact@v4
        with:
          name: DAST_Report.html
          path: owasp-zap-report.html

      - name: Stop and Cleanup Docker
        if: always()
        run: |
          echo "Stopping and removing application container..."
          if docker ps -a --format '{{.Names}}' | grep -q "tech-hive-store"; then
            docker stop tech-hive-store && docker rm tech-hive-store
          fi
          echo "Pruning unused containers and images..."
          docker container prune --force
          docker image prune --force
