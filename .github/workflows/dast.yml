---
name: Dynamic Application Security Testing (DAST)
on:
  workflow_dispatch:

  workflow_call:
    inputs:
      image-tag:
        description: 'The name of the docker image to scan'
        required: true
        type: string
    secrets:
      DOCKERHUB_USERNAME:
        required: true
      DOCKERHUB_PASSWORD:
        required: true

permissions:
  actions: read
  contents: read
  security-events: write

env:
  REGISTRY: docker.io
  IMAGE_TAG: >-
    ${{ inputs.image-tag != '' && inputs.image-tag || format('{0}/tech-hive-store:latest', secrets.DOCKERHUB_USERNAME) }}
  APP_PORT: 8080
  HEALTH_ENDPOINT: http://localhost:$APP_PORT/actuator/health

jobs:
  dast-scan:
    name: DAST Scan
    runs-on: ubuntu-latest
    steps:
      - name: Login to DockerHub
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_PASSWORD }}
      - run: docker rm -f tech-hive-store | true && docker run -d --name tech-hive-store -p 8080:8080 ${{ env.IMAGE_TAG }}

      - name: Wait for the app to start
        run: |
          timeout 300 bash -c "while [[ \"\$(curl -s -o /dev/null -w '%{http_code}' ${{ env.HEALTH_ENDPOINT }})\" != \"200\" ]]; do sleep 5; done"

      - name: Test Container
        run: curl -s ${{ env.HEALTH_ENDPOINT }}

      - name: Run ZAP OWASP Full Scan
        uses: zaproxy/action-full-scan@v0.12.0
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          docker_name: "owasp/zapdocker:stable"
          target: ${{ env.HEALTH_ENDPOINT }}
          cmd_options: '-a -j -l WARN -z "-addoninstallall" '
          allow_issue_writing: true
#      - name: Checkout
#        uses: actions/checkout@v4
#        with:
#          ref: develop
#
#      - name: Run Application Container
#        run: |
#          docker pull "${{ env.IMAGE_TAG }}"
#          docker run -d --name tech-hive-store -p 8080:8080 \
#            -e SPRING_PROFILES_ACTIVE=develop \
#            "${{ env.IMAGE_TAG }}"
#
#          # Wait until health check passes
#          echo "Waiting for app to be healthy..."
#          healthy=false
#          for i in {1..30}; do
#            if curl -s "${HEALTH_ENDPOINT}" | grep -q 'UP'; then
#              echo "✅ App is healthy!"
#              healthy=true
#              break
#            fi
#            echo "Retrying... Attempt $i"
#            sleep 5
#          done
#
#          if [ "$healthy" = false ]; then
#            echo "❌ App failed to become healthy after 30 attempts!"
#            echo "Dumping container logs for debugging:"
#            docker logs tech-hive-store
#            exit 1
#          fi

#      - name: ZAP Scan
#        uses: zaproxy/action-full-scan@v0.12.0
#        with:
#          token: ${{ secrets.GITHUB_TOKEN }}
#          docker_name: "ghcr.io/zaproxy/zaproxy:stable"
#          target: "http://localhost:8080"
#          cmd_options: '-a -j -l WARN -z "-addoninstallall" '
#          allow_issue_writing: true

      - name: Upload HTML report
        uses: actions/upload-artifact@v4
        with:
          name: DAST_Report.html
          path: owasp-zap-report.html

      - name: Stop and Cleanup Docker
        if: always()
        run: |
          echo "Stopping and removing application container..."
          if docker ps -a --format '{{.Names}}' | grep -q "tech-hive-store"; then
            docker stop tech-hive-store && docker rm tech-hive-store
          fi
          echo "Pruning unused containers and images..."
          docker container prune --force
          docker image prune --force
